/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.minicqrs.core.db.tables;


import be.wegenenverkeer.minicqrs.core.db.Keys;
import be.wegenenverkeer.minicqrs.core.db.Public;
import be.wegenenverkeer.minicqrs.core.db.tables.records.JournalRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Journal extends TableImpl<JournalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.journal</code>
     */
    public static final Journal JOURNAL = new Journal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalRecord> getRecordType() {
        return JournalRecord.class;
    }

    /**
     * The column <code>public.journal.id</code>.
     */
    public final TableField<JournalRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.journal.event</code>.
     */
    public final TableField<JournalRecord, JSONB> EVENT = createField(DSL.name("event"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.journal.sequence</code>.
     */
    public final TableField<JournalRecord, Long> SEQUENCE = createField(DSL.name("sequence"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.journal.global_sequence</code>.
     */
    public final TableField<JournalRecord, Long> GLOBAL_SEQUENCE = createField(DSL.name("global_sequence"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('journal_sequence'::regclass)"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.journal.shard</code>.
     */
    public final TableField<JournalRecord, Long> SHARD = createField(DSL.name("shard"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.journal.occured</code>.
     */
    public final TableField<JournalRecord, LocalDateTime> OCCURED = createField(DSL.name("occured"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.journal.type</code>.
     */
    public final TableField<JournalRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    private Journal(Name alias, Table<JournalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Journal(Name alias, Table<JournalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.journal</code> table reference
     */
    public Journal(String alias) {
        this(DSL.name(alias), JOURNAL);
    }

    /**
     * Create an aliased <code>public.journal</code> table reference
     */
    public Journal(Name alias) {
        this(alias, JOURNAL);
    }

    /**
     * Create a <code>public.journal</code> table reference
     */
    public Journal() {
        this(DSL.name("journal"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<JournalRecord> getPrimaryKey() {
        return Keys.JOURNAL_PKEY;
    }

    @Override
    public Journal as(String alias) {
        return new Journal(DSL.name(alias), this);
    }

    @Override
    public Journal as(Name alias) {
        return new Journal(alias, this);
    }

    @Override
    public Journal as(Table<?> alias) {
        return new Journal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(String name) {
        return new Journal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(Name name) {
        return new Journal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Journal rename(Table<?> name) {
        return new Journal(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Journal where(Condition condition) {
        return new Journal(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Journal where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Journal where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Journal where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Journal where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Journal where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Journal where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Journal where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Journal whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Journal whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
