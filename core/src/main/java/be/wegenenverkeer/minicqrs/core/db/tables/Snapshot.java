/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.minicqrs.core.db.tables;

import be.wegenenverkeer.minicqrs.core.db.Keys;
import be.wegenenverkeer.minicqrs.core.db.Public;
import be.wegenenverkeer.minicqrs.core.db.tables.records.SnapshotRecord;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Snapshot extends TableImpl<SnapshotRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.snapshot</code> */
  public static final Snapshot SNAPSHOT = new Snapshot();

  /** The class holding records for this type */
  @Override
  public Class<SnapshotRecord> getRecordType() {
    return SnapshotRecord.class;
  }

  /** The column <code>public.snapshot.id</code>. */
  public final TableField<SnapshotRecord, String> ID =
      createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

  /** The column <code>public.snapshot.snapshot</code>. */
  public final TableField<SnapshotRecord, JSONB> SNAPSHOT_ =
      createField(DSL.name("snapshot"), SQLDataType.JSONB.nullable(false), this, "");

  /** The column <code>public.snapshot.sequence</code>. */
  public final TableField<SnapshotRecord, Long> SEQUENCE =
      createField(DSL.name("sequence"), SQLDataType.BIGINT.nullable(false), this, "");

  /** The column <code>public.snapshot.type</code>. */
  public final TableField<SnapshotRecord, String> TYPE =
      createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

  private Snapshot(Name alias, Table<SnapshotRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private Snapshot(
      Name alias, Table<SnapshotRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /** Create an aliased <code>public.snapshot</code> table reference */
  public Snapshot(String alias) {
    this(DSL.name(alias), SNAPSHOT);
  }

  /** Create an aliased <code>public.snapshot</code> table reference */
  public Snapshot(Name alias) {
    this(alias, SNAPSHOT);
  }

  /** Create a <code>public.snapshot</code> table reference */
  public Snapshot() {
    this(DSL.name("snapshot"), null);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<SnapshotRecord> getPrimaryKey() {
    return Keys.SNAPSHOT_PKEY;
  }

  @Override
  public Snapshot as(String alias) {
    return new Snapshot(DSL.name(alias), this);
  }

  @Override
  public Snapshot as(Name alias) {
    return new Snapshot(alias, this);
  }

  @Override
  public Snapshot as(Table<?> alias) {
    return new Snapshot(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public Snapshot rename(String name) {
    return new Snapshot(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public Snapshot rename(Name name) {
    return new Snapshot(name, null);
  }

  /** Rename this table */
  @Override
  public Snapshot rename(Table<?> name) {
    return new Snapshot(name.getQualifiedName(), null);
  }

  /** Create an inline derived table from this table */
  @Override
  public Snapshot where(Condition condition) {
    return new Snapshot(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /** Create an inline derived table from this table */
  @Override
  public Snapshot where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /** Create an inline derived table from this table */
  @Override
  public Snapshot where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /** Create an inline derived table from this table */
  @Override
  public Snapshot where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public Snapshot where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public Snapshot where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public Snapshot where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public Snapshot where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /** Create an inline derived table from this table */
  @Override
  public Snapshot whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /** Create an inline derived table from this table */
  @Override
  public Snapshot whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
