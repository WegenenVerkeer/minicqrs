/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.minicqrs.core.db.tables.records;

import be.wegenenverkeer.minicqrs.core.db.tables.ProjectionOffset;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ProjectionOffsetRecord extends UpdatableRecordImpl<ProjectionOffsetRecord> {

  private static final long serialVersionUID = 1L;

  /** Setter for <code>public.projection_offset.projection</code>. */
  public void setProjection(String value) {
    set(0, value);
  }

  /** Getter for <code>public.projection_offset.projection</code>. */
  public String getProjection() {
    return (String) get(0);
  }

  /** Setter for <code>public.projection_offset.shard</code>. */
  public void setShard(Long value) {
    set(1, value);
  }

  /** Getter for <code>public.projection_offset.shard</code>. */
  public Long getShard() {
    return (Long) get(1);
  }

  /** Setter for <code>public.projection_offset.sequence</code>. */
  public void setSequence(Long value) {
    set(2, value);
  }

  /** Getter for <code>public.projection_offset.sequence</code>. */
  public Long getSequence() {
    return (Long) get(2);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  @Override
  public Record2<String, Long> key() {
    return (Record2) super.key();
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /** Create a detached ProjectionOffsetRecord */
  public ProjectionOffsetRecord() {
    super(ProjectionOffset.PROJECTION_OFFSET);
  }

  /** Create a detached, initialised ProjectionOffsetRecord */
  public ProjectionOffsetRecord(String projection, Long shard, Long sequence) {
    super(ProjectionOffset.PROJECTION_OFFSET);

    setProjection(projection);
    setShard(shard);
    setSequence(sequence);
    resetChangedOnNotNull();
  }
}
