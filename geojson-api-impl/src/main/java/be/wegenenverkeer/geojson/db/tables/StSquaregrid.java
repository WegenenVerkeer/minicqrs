/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.tables;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.db.tables.records.StSquaregridRecord;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StSquaregrid extends TableImpl<StSquaregridRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.st_squaregrid</code> */
  public static final StSquaregrid ST_SQUAREGRID = new StSquaregrid();

  /** The class holding records for this type */
  @Override
  public Class<StSquaregridRecord> getRecordType() {
    return StSquaregridRecord.class;
  }

  /** The column <code>public.st_squaregrid.geom</code>. */
  public final TableField<StSquaregridRecord, Geometry<?>> GEOM =
      createField(DSL.name("geom"), SQLDataType.OTHER, this, "", new GeolatteGeometryConverter());

  /** The column <code>public.st_squaregrid.i</code>. */
  public final TableField<StSquaregridRecord, Integer> I =
      createField(DSL.name("i"), SQLDataType.INTEGER, this, "");

  /** The column <code>public.st_squaregrid.j</code>. */
  public final TableField<StSquaregridRecord, Integer> J =
      createField(DSL.name("j"), SQLDataType.INTEGER, this, "");

  private StSquaregrid(Name alias, Table<StSquaregridRecord> aliased) {
    this(
        alias,
        aliased,
        new Field[] {
          DSL.val(null, SQLDataType.DOUBLE),
          DSL.val(null, SQLDataType.OTHER.asConvertedDataType(new GeolatteGeometryConverter()))
        });
  }

  private StSquaregrid(Name alias, Table<StSquaregridRecord> aliased, Field<?>[] parameters) {
    this(alias, aliased, parameters, null);
  }

  private StSquaregrid(
      Name alias, Table<StSquaregridRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
  }

  /** Create an aliased <code>public.st_squaregrid</code> table reference */
  public StSquaregrid(String alias) {
    this(DSL.name(alias), ST_SQUAREGRID);
  }

  /** Create an aliased <code>public.st_squaregrid</code> table reference */
  public StSquaregrid(Name alias) {
    this(alias, ST_SQUAREGRID);
  }

  /** Create a <code>public.st_squaregrid</code> table reference */
  public StSquaregrid() {
    this(DSL.name("st_squaregrid"), null);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public StSquaregrid as(String alias) {
    return new StSquaregrid(DSL.name(alias), this, parameters);
  }

  @Override
  public StSquaregrid as(Name alias) {
    return new StSquaregrid(alias, this, parameters);
  }

  @Override
  public StSquaregrid as(Table<?> alias) {
    return new StSquaregrid(alias.getQualifiedName(), this, parameters);
  }

  /** Rename this table */
  @Override
  public StSquaregrid rename(String name) {
    return new StSquaregrid(DSL.name(name), null, parameters);
  }

  /** Rename this table */
  @Override
  public StSquaregrid rename(Name name) {
    return new StSquaregrid(name, null, parameters);
  }

  /** Rename this table */
  @Override
  public StSquaregrid rename(Table<?> name) {
    return new StSquaregrid(name.getQualifiedName(), null, parameters);
  }

  /** Call this table-valued function */
  public StSquaregrid call(Double size, Geometry<?> bounds) {
    StSquaregrid result =
        new StSquaregrid(
            DSL.name("st_squaregrid"),
            null,
            new Field[] {
              DSL.val(size, SQLDataType.DOUBLE),
              DSL.val(
                  bounds, SQLDataType.OTHER.asConvertedDataType(new GeolatteGeometryConverter()))
            });

    return aliased() ? result.as(getUnqualifiedName()) : result;
  }

  /** Call this table-valued function */
  public StSquaregrid call(Field<Double> size, Field<Geometry<?>> bounds) {
    StSquaregrid result =
        new StSquaregrid(DSL.name("st_squaregrid"), null, new Field[] {size, bounds});

    return aliased() ? result.as(getUnqualifiedName()) : result;
  }
}
