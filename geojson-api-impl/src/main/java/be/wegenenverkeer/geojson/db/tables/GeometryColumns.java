/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.tables;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.db.tables.records.GeometryColumnsRecord;
import java.util.Collection;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class GeometryColumns extends TableImpl<GeometryColumnsRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.geometry_columns</code> */
  public static final GeometryColumns GEOMETRY_COLUMNS = new GeometryColumns();

  /** The class holding records for this type */
  @Override
  public Class<GeometryColumnsRecord> getRecordType() {
    return GeometryColumnsRecord.class;
  }

  /** The column <code>public.geometry_columns.f_table_catalog</code>. */
  public final TableField<GeometryColumnsRecord, String> F_TABLE_CATALOG =
      createField(DSL.name("f_table_catalog"), SQLDataType.VARCHAR(256), this, "");

  /** The column <code>public.geometry_columns.f_table_schema</code>. */
  public final TableField<GeometryColumnsRecord, String> F_TABLE_SCHEMA =
      createField(DSL.name("f_table_schema"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.geometry_columns.f_table_name</code>. */
  public final TableField<GeometryColumnsRecord, String> F_TABLE_NAME =
      createField(DSL.name("f_table_name"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.geometry_columns.f_geometry_column</code>. */
  public final TableField<GeometryColumnsRecord, String> F_GEOMETRY_COLUMN =
      createField(DSL.name("f_geometry_column"), SQLDataType.VARCHAR, this, "");

  /** The column <code>public.geometry_columns.coord_dimension</code>. */
  public final TableField<GeometryColumnsRecord, Integer> COORD_DIMENSION =
      createField(DSL.name("coord_dimension"), SQLDataType.INTEGER, this, "");

  /** The column <code>public.geometry_columns.srid</code>. */
  public final TableField<GeometryColumnsRecord, Integer> SRID =
      createField(DSL.name("srid"), SQLDataType.INTEGER, this, "");

  /** The column <code>public.geometry_columns.type</code>. */
  public final TableField<GeometryColumnsRecord, String> TYPE =
      createField(DSL.name("type"), SQLDataType.VARCHAR(30), this, "");

  private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private GeometryColumns(
      Name alias, Table<GeometryColumnsRecord> aliased, Field<?>[] parameters, Condition where) {
    super(
        alias,
        null,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.view(
            """
        create view "geometry_columns" as  SELECT (current_database())::character varying(256) AS f_table_catalog,
          n.nspname AS f_table_schema,
          c.relname AS f_table_name,
          a.attname AS f_geometry_column,
          COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension,
          COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid,
          (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type
         FROM ((((((pg_class c
           JOIN pg_attribute a ON (((a.attrelid = c.oid) AND (NOT a.attisdropped))))
           JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
           JOIN pg_type t ON ((a.atttypid = t.oid)))
           LEFT JOIN ( SELECT s.connamespace,
                  s.conrelid,
                  s.conkey,
                  replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type
                 FROM ( SELECT pg_constraint.connamespace,
                          pg_constraint.conrelid,
                          pg_constraint.conkey,
                          pg_get_constraintdef(pg_constraint.oid) AS consrc
                         FROM pg_constraint) s
                WHERE (s.consrc ~~* '%geometrytype(% = %'::text)) st ON (((st.connamespace = n.oid) AND (st.conrelid = c.oid) AND (a.attnum = ANY (st.conkey)))))
           LEFT JOIN ( SELECT s.connamespace,
                  s.conrelid,
                  s.conkey,
                  (replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text))::integer AS ndims
                 FROM ( SELECT pg_constraint.connamespace,
                          pg_constraint.conrelid,
                          pg_constraint.conkey,
                          pg_get_constraintdef(pg_constraint.oid) AS consrc
                         FROM pg_constraint) s
                WHERE (s.consrc ~~* '%ndims(% = %'::text)) sn ON (((sn.connamespace = n.oid) AND (sn.conrelid = c.oid) AND (a.attnum = ANY (sn.conkey)))))
           LEFT JOIN ( SELECT s.connamespace,
                  s.conrelid,
                  s.conkey,
                  (replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text))::integer AS srid
                 FROM ( SELECT pg_constraint.connamespace,
                          pg_constraint.conrelid,
                          pg_constraint.conkey,
                          pg_get_constraintdef(pg_constraint.oid) AS consrc
                         FROM pg_constraint) s
                WHERE (s.consrc ~~* '%srid(% = %'::text)) sr ON (((sr.connamespace = n.oid) AND (sr.conrelid = c.oid) AND (a.attnum = ANY (sr.conkey)))))
        WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char", 'p'::"char"])) AND (NOT (c.relname = 'raster_columns'::name)) AND (t.typname = 'geometry'::name) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));
        """),
        where);
  }

  /** Create an aliased <code>public.geometry_columns</code> table reference */
  public GeometryColumns(String alias) {
    this(DSL.name(alias), GEOMETRY_COLUMNS);
  }

  /** Create an aliased <code>public.geometry_columns</code> table reference */
  public GeometryColumns(Name alias) {
    this(alias, GEOMETRY_COLUMNS);
  }

  /** Create a <code>public.geometry_columns</code> table reference */
  public GeometryColumns() {
    this(DSL.name("geometry_columns"), null);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public GeometryColumns as(String alias) {
    return new GeometryColumns(DSL.name(alias), this);
  }

  @Override
  public GeometryColumns as(Name alias) {
    return new GeometryColumns(alias, this);
  }

  @Override
  public GeometryColumns as(Table<?> alias) {
    return new GeometryColumns(alias.getQualifiedName(), this);
  }

  /** Rename this table */
  @Override
  public GeometryColumns rename(String name) {
    return new GeometryColumns(DSL.name(name), null);
  }

  /** Rename this table */
  @Override
  public GeometryColumns rename(Name name) {
    return new GeometryColumns(name, null);
  }

  /** Rename this table */
  @Override
  public GeometryColumns rename(Table<?> name) {
    return new GeometryColumns(name.getQualifiedName(), null);
  }

  /** Create an inline derived table from this table */
  @Override
  public GeometryColumns where(Condition condition) {
    return new GeometryColumns(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /** Create an inline derived table from this table */
  @Override
  public GeometryColumns where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /** Create an inline derived table from this table */
  @Override
  public GeometryColumns where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /** Create an inline derived table from this table */
  @Override
  public GeometryColumns where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public GeometryColumns where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public GeometryColumns where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public GeometryColumns where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /** Create an inline derived table from this table */
  @Override
  @PlainSQL
  public GeometryColumns where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /** Create an inline derived table from this table */
  @Override
  public GeometryColumns whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /** Create an inline derived table from this table */
  @Override
  public GeometryColumns whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
