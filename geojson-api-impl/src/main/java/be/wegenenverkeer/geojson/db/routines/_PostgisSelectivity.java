/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.routines;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class _PostgisSelectivity extends AbstractRoutine<Double> {

  private static final long serialVersionUID = 1L;

  /** The parameter <code>public._postgis_selectivity.RETURN_VALUE</code>. */
  public static final Parameter<Double> RETURN_VALUE =
      Internal.createParameter("RETURN_VALUE", SQLDataType.DOUBLE, false, false);

  /**
   * @deprecated Unknown data type. If this is a qualified, user-defined type, it may have been
   *     excluded from code generation. If this is a built-in type, you can define an explicit
   *     {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be
   *     turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator
   *     configuration.
   */
  @Deprecated
  public static final Parameter<Object> TBL =
      Internal.createParameter(
          "tbl", DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regclass\""), false, false);

  /** The parameter <code>public._postgis_selectivity.att_name</code>. */
  public static final Parameter<String> ATT_NAME =
      Internal.createParameter("att_name", SQLDataType.CLOB, false, false);

  /** The parameter <code>public._postgis_selectivity.geom</code>. */
  public static final Parameter<Geometry<?>> GEOM =
      Internal.createParameter(
          "geom", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public._postgis_selectivity.mode</code>. */
  public static final Parameter<String> MODE =
      Internal.createParameter(
          "mode",
          SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("'2'::text"), SQLDataType.CLOB)),
          true,
          false);

  /** Create a new routine call instance */
  public _PostgisSelectivity() {
    super("_postgis_selectivity", Public.PUBLIC, SQLDataType.DOUBLE);

    setReturnParameter(RETURN_VALUE);
    addInParameter(TBL);
    addInParameter(ATT_NAME);
    addInParameter(GEOM);
    addInParameter(MODE);
  }

  /** Set the <code>tbl</code> parameter IN value to the routine */
  public void setTbl(Object value) {
    setValue(TBL, value);
  }

  /**
   * Set the <code>tbl</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setTbl(Field<Object> field) {
    setField(TBL, field);
  }

  /** Set the <code>att_name</code> parameter IN value to the routine */
  public void setAttName(String value) {
    setValue(ATT_NAME, value);
  }

  /**
   * Set the <code>att_name</code> parameter to the function to be used with a {@link
   * org.jooq.Select} statement
   */
  public void setAttName(Field<String> field) {
    setField(ATT_NAME, field);
  }

  /** Set the <code>geom</code> parameter IN value to the routine */
  public void setGeom(Geometry<?> value) {
    setValue(GEOM, value);
  }

  /**
   * Set the <code>geom</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setGeom(Field<Geometry<?>> field) {
    setField(GEOM, field);
  }

  /** Set the <code>mode</code> parameter IN value to the routine */
  public void setMode(String value) {
    setValue(MODE, value);
  }

  /**
   * Set the <code>mode</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setMode(Field<String> field) {
    setField(MODE, field);
  }
}
