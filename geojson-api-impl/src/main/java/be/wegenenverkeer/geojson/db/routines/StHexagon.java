/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.routines;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StHexagon extends AbstractRoutine<Geometry<?>> {

  private static final long serialVersionUID = 1L;

  /** The parameter <code>public.st_hexagon.RETURN_VALUE</code>. */
  public static final Parameter<Geometry<?>> RETURN_VALUE =
      Internal.createParameter(
          "RETURN_VALUE", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_hexagon.size</code>. */
  public static final Parameter<Double> SIZE =
      Internal.createParameter("size", SQLDataType.DOUBLE, false, false);

  /** The parameter <code>public.st_hexagon.cell_i</code>. */
  public static final Parameter<Integer> CELL_I =
      Internal.createParameter("cell_i", SQLDataType.INTEGER, false, false);

  /** The parameter <code>public.st_hexagon.cell_j</code>. */
  public static final Parameter<Integer> CELL_J =
      Internal.createParameter("cell_j", SQLDataType.INTEGER, false, false);

  /** The parameter <code>public.st_hexagon.origin</code>. */
  public static final Parameter<Geometry<?>> ORIGIN =
      Internal.createParameter(
          "origin",
          SQLDataType.OTHER.defaultValue(
              DSL.field(
                  DSL.raw("'010100000000000000000000000000000000000000'::geometry"),
                  SQLDataType.OTHER)),
          true,
          false,
          new GeolatteGeometryConverter());

  /** Create a new routine call instance */
  public StHexagon() {
    super("st_hexagon", Public.PUBLIC, SQLDataType.OTHER, new GeolatteGeometryConverter());

    setReturnParameter(RETURN_VALUE);
    addInParameter(SIZE);
    addInParameter(CELL_I);
    addInParameter(CELL_J);
    addInParameter(ORIGIN);
  }

  /** Set the <code>size</code> parameter IN value to the routine */
  public void setSize(Double value) {
    setValue(SIZE, value);
  }

  /**
   * Set the <code>size</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setSize(Field<Double> field) {
    setField(SIZE, field);
  }

  /** Set the <code>cell_i</code> parameter IN value to the routine */
  public void setCellI(Integer value) {
    setValue(CELL_I, value);
  }

  /**
   * Set the <code>cell_i</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setCellI(Field<Integer> field) {
    setField(CELL_I, field);
  }

  /** Set the <code>cell_j</code> parameter IN value to the routine */
  public void setCellJ(Integer value) {
    setValue(CELL_J, value);
  }

  /**
   * Set the <code>cell_j</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setCellJ(Field<Integer> field) {
    setField(CELL_J, field);
  }

  /** Set the <code>origin</code> parameter IN value to the routine */
  public void setOrigin(Geometry<?> value) {
    setValue(ORIGIN, value);
  }

  /**
   * Set the <code>origin</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setOrigin(Field<Geometry<?>> field) {
    setField(ORIGIN, field);
  }
}
