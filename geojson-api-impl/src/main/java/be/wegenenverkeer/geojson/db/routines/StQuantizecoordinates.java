/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.routines;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StQuantizecoordinates extends AbstractRoutine<Geometry<?>> {

  private static final long serialVersionUID = 1L;

  /** The parameter <code>public.st_quantizecoordinates.RETURN_VALUE</code>. */
  public static final Parameter<Geometry<?>> RETURN_VALUE =
      Internal.createParameter(
          "RETURN_VALUE", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_quantizecoordinates.g</code>. */
  public static final Parameter<Geometry<?>> G =
      Internal.createParameter(
          "g", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_quantizecoordinates.prec_x</code>. */
  public static final Parameter<Integer> PREC_X =
      Internal.createParameter("prec_x", SQLDataType.INTEGER, false, false);

  /** The parameter <code>public.st_quantizecoordinates.prec_y</code>. */
  public static final Parameter<Integer> PREC_Y =
      Internal.createParameter(
          "prec_y",
          SQLDataType.INTEGER.defaultValue(
              DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER)),
          true,
          false);

  /** The parameter <code>public.st_quantizecoordinates.prec_z</code>. */
  public static final Parameter<Integer> PREC_Z =
      Internal.createParameter(
          "prec_z",
          SQLDataType.INTEGER.defaultValue(
              DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER)),
          true,
          false);

  /** The parameter <code>public.st_quantizecoordinates.prec_m</code>. */
  public static final Parameter<Integer> PREC_M =
      Internal.createParameter(
          "prec_m",
          SQLDataType.INTEGER.defaultValue(
              DSL.field(DSL.raw("NULL::integer"), SQLDataType.INTEGER)),
          true,
          false);

  /** Create a new routine call instance */
  public StQuantizecoordinates() {
    super(
        "st_quantizecoordinates",
        Public.PUBLIC,
        SQLDataType.OTHER,
        new GeolatteGeometryConverter());

    setReturnParameter(RETURN_VALUE);
    addInParameter(G);
    addInParameter(PREC_X);
    addInParameter(PREC_Y);
    addInParameter(PREC_Z);
    addInParameter(PREC_M);
  }

  /** Set the <code>g</code> parameter IN value to the routine */
  public void setG(Geometry<?> value) {
    setValue(G, value);
  }

  /**
   * Set the <code>g</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setG(Field<Geometry<?>> field) {
    setField(G, field);
  }

  /** Set the <code>prec_x</code> parameter IN value to the routine */
  public void setPrecX(Integer value) {
    setValue(PREC_X, value);
  }

  /**
   * Set the <code>prec_x</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPrecX(Field<Integer> field) {
    setField(PREC_X, field);
  }

  /** Set the <code>prec_y</code> parameter IN value to the routine */
  public void setPrecY(Integer value) {
    setValue(PREC_Y, value);
  }

  /**
   * Set the <code>prec_y</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPrecY(Field<Integer> field) {
    setField(PREC_Y, field);
  }

  /** Set the <code>prec_z</code> parameter IN value to the routine */
  public void setPrecZ(Integer value) {
    setValue(PREC_Z, value);
  }

  /**
   * Set the <code>prec_z</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPrecZ(Field<Integer> field) {
    setField(PREC_Z, field);
  }

  /** Set the <code>prec_m</code> parameter IN value to the routine */
  public void setPrecM(Integer value) {
    setValue(PREC_M, value);
  }

  /**
   * Set the <code>prec_m</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPrecM(Field<Integer> field) {
    setField(PREC_M, field);
  }
}
