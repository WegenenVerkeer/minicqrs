/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.tables;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.db.tables.records.StSubdivideRecord;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StSubdivide extends TableImpl<StSubdivideRecord> {

  private static final long serialVersionUID = 1L;

  /** The reference instance of <code>public.st_subdivide</code> */
  public static final StSubdivide ST_SUBDIVIDE = new StSubdivide();

  /** The class holding records for this type */
  @Override
  public Class<StSubdivideRecord> getRecordType() {
    return StSubdivideRecord.class;
  }

  /** The column <code>public.st_subdivide.st_subdivide</code>. */
  public final TableField<StSubdivideRecord, Geometry<?>> ST_SUBDIVIDE_ =
      createField(
          DSL.name("st_subdivide"), SQLDataType.OTHER, this, "", new GeolatteGeometryConverter());

  private StSubdivide(Name alias, Table<StSubdivideRecord> aliased) {
    this(
        alias,
        aliased,
        new Field[] {
          DSL.val(null, SQLDataType.OTHER.asConvertedDataType(new GeolatteGeometryConverter())),
          DSL.val(
              null,
              SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("256"), SQLDataType.INTEGER))),
          DSL.val(
              null,
              SQLDataType.DOUBLE.defaultValue(
                  DSL.field(DSL.raw("'-1.0'::numeric"), SQLDataType.DOUBLE)))
        });
  }

  private StSubdivide(Name alias, Table<StSubdivideRecord> aliased, Field<?>[] parameters) {
    this(alias, aliased, parameters, null);
  }

  private StSubdivide(
      Name alias, Table<StSubdivideRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
  }

  /** Create an aliased <code>public.st_subdivide</code> table reference */
  public StSubdivide(String alias) {
    this(DSL.name(alias), ST_SUBDIVIDE);
  }

  /** Create an aliased <code>public.st_subdivide</code> table reference */
  public StSubdivide(Name alias) {
    this(alias, ST_SUBDIVIDE);
  }

  /** Create a <code>public.st_subdivide</code> table reference */
  public StSubdivide() {
    this(DSL.name("st_subdivide"), null);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public StSubdivide as(String alias) {
    return new StSubdivide(DSL.name(alias), this, parameters);
  }

  @Override
  public StSubdivide as(Name alias) {
    return new StSubdivide(alias, this, parameters);
  }

  @Override
  public StSubdivide as(Table<?> alias) {
    return new StSubdivide(alias.getQualifiedName(), this, parameters);
  }

  /** Rename this table */
  @Override
  public StSubdivide rename(String name) {
    return new StSubdivide(DSL.name(name), null, parameters);
  }

  /** Rename this table */
  @Override
  public StSubdivide rename(Name name) {
    return new StSubdivide(name, null, parameters);
  }

  /** Rename this table */
  @Override
  public StSubdivide rename(Table<?> name) {
    return new StSubdivide(name.getQualifiedName(), null, parameters);
  }

  /** Call this table-valued function */
  public StSubdivide call(Geometry<?> geom, Integer maxvertices, Double gridsize) {
    StSubdivide result =
        new StSubdivide(
            DSL.name("st_subdivide"),
            null,
            new Field[] {
              DSL.val(geom, SQLDataType.OTHER.asConvertedDataType(new GeolatteGeometryConverter())),
              DSL.val(
                  maxvertices,
                  SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("256"), SQLDataType.INTEGER))),
              DSL.val(
                  gridsize,
                  SQLDataType.DOUBLE.defaultValue(
                      DSL.field(DSL.raw("'-1.0'::numeric"), SQLDataType.DOUBLE)))
            });

    return aliased() ? result.as(getUnqualifiedName()) : result;
  }

  /** Call this table-valued function */
  public StSubdivide call(
      Field<Geometry<?>> geom, Field<Integer> maxvertices, Field<Double> gridsize) {
    StSubdivide result =
        new StSubdivide(DSL.name("st_subdivide"), null, new Field[] {geom, maxvertices, gridsize});

    return aliased() ? result.as(getUnqualifiedName()) : result;
  }
}
