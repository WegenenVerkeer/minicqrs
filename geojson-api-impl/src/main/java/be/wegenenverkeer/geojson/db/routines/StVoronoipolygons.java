/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.routines;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StVoronoipolygons extends AbstractRoutine<Geometry<?>> {

  private static final long serialVersionUID = 1L;

  /** The parameter <code>public.st_voronoipolygons.RETURN_VALUE</code>. */
  public static final Parameter<Geometry<?>> RETURN_VALUE =
      Internal.createParameter(
          "RETURN_VALUE", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_voronoipolygons.g1</code>. */
  public static final Parameter<Geometry<?>> G1 =
      Internal.createParameter(
          "g1", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_voronoipolygons.tolerance</code>. */
  public static final Parameter<Double> TOLERANCE =
      Internal.createParameter(
          "tolerance",
          SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("0.0"), SQLDataType.DOUBLE)),
          true,
          false);

  /** The parameter <code>public.st_voronoipolygons.extend_to</code>. */
  public static final Parameter<Geometry<?>> EXTEND_TO =
      Internal.createParameter(
          "extend_to",
          SQLDataType.OTHER.defaultValue(DSL.field(DSL.raw("NULL::geometry"), SQLDataType.OTHER)),
          true,
          false,
          new GeolatteGeometryConverter());

  /** Create a new routine call instance */
  public StVoronoipolygons() {
    super("st_voronoipolygons", Public.PUBLIC, SQLDataType.OTHER, new GeolatteGeometryConverter());

    setReturnParameter(RETURN_VALUE);
    addInParameter(G1);
    addInParameter(TOLERANCE);
    addInParameter(EXTEND_TO);
  }

  /** Set the <code>g1</code> parameter IN value to the routine */
  public void setG1(Geometry<?> value) {
    setValue(G1, value);
  }

  /**
   * Set the <code>g1</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setG1(Field<Geometry<?>> field) {
    setField(G1, field);
  }

  /** Set the <code>tolerance</code> parameter IN value to the routine */
  public void setTolerance(Double value) {
    setValue(TOLERANCE, value);
  }

  /**
   * Set the <code>tolerance</code> parameter to the function to be used with a {@link
   * org.jooq.Select} statement
   */
  public void setTolerance(Field<Double> field) {
    setField(TOLERANCE, field);
  }

  /** Set the <code>extend_to</code> parameter IN value to the routine */
  public void setExtendTo(Geometry<?> value) {
    setValue(EXTEND_TO, value);
  }

  /**
   * Set the <code>extend_to</code> parameter to the function to be used with a {@link
   * org.jooq.Select} statement
   */
  public void setExtendTo(Field<Geometry<?>> field) {
    setField(EXTEND_TO, field);
  }
}
