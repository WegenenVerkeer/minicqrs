/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.routines;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StAngle1 extends AbstractRoutine<Double> {

  private static final long serialVersionUID = 1L;

  /** The parameter <code>public.st_angle.RETURN_VALUE</code>. */
  public static final Parameter<Double> RETURN_VALUE =
      Internal.createParameter("RETURN_VALUE", SQLDataType.DOUBLE, false, false);

  /** The parameter <code>public.st_angle.pt1</code>. */
  public static final Parameter<Geometry<?>> PT1 =
      Internal.createParameter(
          "pt1", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_angle.pt2</code>. */
  public static final Parameter<Geometry<?>> PT2 =
      Internal.createParameter(
          "pt2", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_angle.pt3</code>. */
  public static final Parameter<Geometry<?>> PT3 =
      Internal.createParameter(
          "pt3", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_angle.pt4</code>. */
  public static final Parameter<Geometry<?>> PT4 =
      Internal.createParameter(
          "pt4",
          SQLDataType.OTHER.defaultValue(
              DSL.field(
                  DSL.raw("'0101000000000000000000F87F000000000000F87F'::geometry"),
                  SQLDataType.OTHER)),
          true,
          false,
          new GeolatteGeometryConverter());

  /** Create a new routine call instance */
  public StAngle1() {
    super("st_angle", Public.PUBLIC, SQLDataType.DOUBLE);

    setReturnParameter(RETURN_VALUE);
    addInParameter(PT1);
    addInParameter(PT2);
    addInParameter(PT3);
    addInParameter(PT4);
    setOverloaded(true);
  }

  /** Set the <code>pt1</code> parameter IN value to the routine */
  public void setPt1(Geometry<?> value) {
    setValue(PT1, value);
  }

  /**
   * Set the <code>pt1</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPt1(Field<Geometry<?>> field) {
    setField(PT1, field);
  }

  /** Set the <code>pt2</code> parameter IN value to the routine */
  public void setPt2(Geometry<?> value) {
    setValue(PT2, value);
  }

  /**
   * Set the <code>pt2</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPt2(Field<Geometry<?>> field) {
    setField(PT2, field);
  }

  /** Set the <code>pt3</code> parameter IN value to the routine */
  public void setPt3(Geometry<?> value) {
    setValue(PT3, value);
  }

  /**
   * Set the <code>pt3</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPt3(Field<Geometry<?>> field) {
    setField(PT3, field);
  }

  /** Set the <code>pt4</code> parameter IN value to the routine */
  public void setPt4(Geometry<?> value) {
    setValue(PT4, value);
  }

  /**
   * Set the <code>pt4</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setPt4(Field<Geometry<?>> field) {
    setField(PT4, field);
  }
}
