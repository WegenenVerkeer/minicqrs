/*
 * This file is generated by jOOQ.
 */
package be.wegenenverkeer.geojson.db.routines;

import be.wegenenverkeer.geojson.db.Public;
import be.wegenenverkeer.geojson.util.GeolatteGeometryConverter;
import org.geolatte.geom.Geometry;
import org.jooq.Field;
import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StWkbtosql extends AbstractRoutine<Geometry<?>> {

  private static final long serialVersionUID = 1L;

  /** The parameter <code>public.st_wkbtosql.RETURN_VALUE</code>. */
  public static final Parameter<Geometry<?>> RETURN_VALUE =
      Internal.createParameter(
          "RETURN_VALUE", SQLDataType.OTHER, false, false, new GeolatteGeometryConverter());

  /** The parameter <code>public.st_wkbtosql.wkb</code>. */
  public static final Parameter<byte[]> WKB =
      Internal.createParameter("wkb", SQLDataType.BLOB, false, false);

  /** Create a new routine call instance */
  public StWkbtosql() {
    super("st_wkbtosql", Public.PUBLIC, SQLDataType.OTHER, new GeolatteGeometryConverter());

    setReturnParameter(RETURN_VALUE);
    addInParameter(WKB);
  }

  /** Set the <code>wkb</code> parameter IN value to the routine */
  public void setWkb(byte[] value) {
    setValue(WKB, value);
  }

  /**
   * Set the <code>wkb</code> parameter to the function to be used with a {@link org.jooq.Select}
   * statement
   */
  public void setWkb(Field<byte[]> field) {
    setField(WKB, field);
  }
}
